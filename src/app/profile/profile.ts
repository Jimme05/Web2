import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { ApiService } from '../services/service';
import { UserNavbar } from "../user-navbar/user-navbar";

interface User {
  id: string;
  name: string;
  email: string;
  profileImage: string | null;
  role: string;
  walletBalance: number;
  ownedGames: string[];
  createdAt: string;
}

interface Transaction {
  id: string;
  userId: string | number;
  type: 'topup' | 'purchase';
  amount: number;
  description: string;
  balanceBefore: number;
  balanceAfter: number;
  gamesPurchased?: string[];
  createdAt: string;
}

@Component({
  selector: 'app-profile',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink, UserNavbar],
  templateUrl: './profile.html',
  styleUrls: ['./profile.scss']
})
export class Profile {
  balance = 5000;
  currentUser: User | null = null;

  walletBalance = 0;
  transactions: Transaction[] = [];
  isTopupModalOpen = false;
  selectedAmount = 0;
  customAmount = '';
  quickAmounts: number[] = [100, 200, 500, 1000, 2000, 5000];
  transactionFilter: 'all' | 'topup' | 'purchase' = 'all';

  constructor(private router: Router, private api: ApiService) {}

  async ngOnInit() {
    await this.loadUserData();
    await this.loadTransactions(); // ‚Üê ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å backend
  }

  // üéØ ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå 203 (‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /upload)
  imageUrl(fileName?: string | null): string {
    if (!fileName) return '';
    // ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô "abc.jpg"
    if (!/^https?:\/\//i.test(fileName)) {
      return `http://202.28.34.203:30000/upload/${fileName}`;
    }
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    return fileName;
  }

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ email ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
  async loadUserData() {
    const userJson = localStorage.getItem('currentUser');
    if (!userJson) return;

    const cached = JSON.parse(userJson) as User;
    try {
      const profile = await this.api.me(cached.email);
      this.currentUser = profile;
      this.walletBalance = profile.walletBalance || 0;
      localStorage.setItem('currentUser', JSON.stringify(profile)); // sync ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    } catch (err: any) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
      this.currentUser = cached; // fallback
      this.walletBalance = cached.walletBalance || 0;
    }
  }

  // üìú ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å API
  async loadTransactions(): Promise<void> {
    try {
      const user = this.currentUser ?? JSON.parse(localStorage.getItem('currentUser') || 'null');
      if (!user?.email) {
        this.transactions = [];
        return;
      }
      // ‡πÉ‡∏ä‡πâ endpoint: GET /api/Transactions/by-user?email=...
      const list = await this.api.getTransactionsByUser(user.email);
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà -> ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ)
      this.transactions = (list ?? []).sort(
        (a: Transaction, b: Transaction) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
    } catch (e) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', e);
      this.transactions = [];
    }
  }

  // üîí LOGOUT
  logout(): void {
    localStorage.removeItem('currentUser');
    localStorage.removeItem('cart');
    localStorage.removeItem('transactions');
    localStorage.removeItem('walletBalance');
    alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ');
    this.router.navigate(['/']);
  }

  async goToEditProfile() {
    await this.router.navigate(['/edit-profile']);
  }

  // =====================
  // üìú TRANSACTIONS (UI helpers)
  // =====================
  get filteredTransactions(): Transaction[] {
    if (this.transactionFilter === 'all') return this.transactions;
    return this.transactions.filter(t => t.type === this.transactionFilter);
  }

  setFilter(filter: 'all' | 'topup' | 'purchase'): void {
    this.transactionFilter = filter;
  }

  getTransactionIcon(type: string): string {
    return type === 'topup' ? 'üí∞' : 'üéÆ';
  }

  getTransactionClass(type: string): string {
    return type === 'topup' ? 'transaction-topup' : 'transaction-purchase';
  }

  formatDate(dateString: string): string {
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    return date.toLocaleDateString('th-TH', options);
  }

  formatCurrency(amount: number): string {
    return amount.toLocaleString('th-TH', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    });
  }

  get totalTopups(): number {
    return this.transactions
      .filter(t => t.type === 'topup')
      .reduce((sum, t) => sum + t.amount, 0);
  }

  get totalPurchases(): number {
    return this.transactions
      .filter(t => t.type === 'purchase')
      .reduce((sum, t) => sum + t.amount, 0);
  }

  // =====================
  // üí∞ MODAL / WALLET / TRANSACTION (‡∏ù‡∏±‡πà‡∏á client ‡πÄ‡∏î‡∏¥‡∏°)
  // =====================
  openTopupModal(): void {
    this.isTopupModalOpen = true;
    this.selectedAmount = 0;
    this.customAmount = '';
    document.body.style.overflow = 'hidden';
  }

  closeTopupModal(): void {
    this.isTopupModalOpen = false;
    this.selectedAmount = 0;
    this.customAmount = '';
    document.body.style.overflow = 'auto';
  }

  closeModalOnOverlay(event: MouseEvent): void {
    if ((event.target as HTMLElement).classList.contains('modal-overlay')) {
      this.closeTopupModal();
    }
  }

  selectQuickAmount(amount: number): void {
    this.selectedAmount = amount;
    this.customAmount = '';
  }

  onCustomAmountChange(): void {
    const amount = parseInt(this.customAmount);
    this.selectedAmount = !isNaN(amount) && amount > 0 ? amount : 0;
  }

  confirmTopup(): void {
    if (this.selectedAmount <= 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°');
      return;
    }
    if (!this.currentUser) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      return;
    }

    const balanceBefore = this.walletBalance;
    const balanceAfter = balanceBefore + this.selectedAmount;

    const tx: Transaction = {
      id: Date.now().toString(),
      userId: this.currentUser.id,
      type: 'topup',
      amount: this.selectedAmount,
      description: `‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ø${this.selectedAmount.toLocaleString()}`,
      balanceBefore,
      balanceAfter,
      createdAt: new Date().toISOString()
    };

    this.walletBalance = balanceAfter;
    this.currentUser.walletBalance = balanceAfter;

    // (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å localStorage ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
    // const localTx = JSON.parse(localStorage.getItem('transactions') || '[]');
    // localTx.push(tx);
    // localStorage.setItem('transactions', JSON.stringify(localTx));

    alert(`‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ø${this.selectedAmount.toLocaleString()}`);
    this.closeTopupModal();

    // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å backend (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏≥ topup API ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ call ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä)
    this.loadTransactions();
  }
}
