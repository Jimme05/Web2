import { Component } from '@angular/core';
import { Router, RouterLink } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { UserNavbar } from "../user-navbar/user-navbar";
import { ApiService } from '../services/service';
import { environment } from '../services/environment';

export interface Game {
  id: number;
  title: string;
  genre: string;
  price: number;
  rank: number;
  imagePath?: string; // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å backend (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
}

interface CartItem {
  gameId: number;
  title: string;
  price: number;
  qty: number;
  imageFileName?: string | null;
}

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [UserNavbar, CommonModule, FormsModule, RouterLink],
  templateUrl: './home.html',
  styleUrl: './home.scss'
})
export class Home {
  balance = 5000;
  selectedGame: Game | null = null;
  showDetailModal = false;

  constructor(private router: Router, private api: ApiService) {}

  games: Game[] = [];
  
  searchTerm = '';
  selectedGenre = '‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó';
  genres = ['‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 'RPG', 'Racing', 'Strategy', 'FPS', 'Adventure', 'Action'];
  allGames: Game[] = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á
  cart: CartItem[] = [];
cartKey = 'cart:guest'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô cart:<userId> ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

async ngOnInit() {
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentUser ‡πÄ‡∏Å‡πá‡∏ö userId/‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏ß‡πâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô key ‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô
  const cu = localStorage.getItem('currentUser');
  if (cu) {
    try {
      const u = JSON.parse(cu);
      const keyId = u?.id || u?.email || 'guest';
      this.cartKey = `cart:${keyId}`;
    } catch {}
  }
  this.loadCart();

  await this.loadGames();
} 
// ===== Cart helpers =====
loadCart() {
  const raw = localStorage.getItem(this.cartKey);
  this.cart = raw ? JSON.parse(raw) : [];
}

saveCart() {
  localStorage.setItem(this.cartKey, JSON.stringify(this.cart));
}

get cartCount(): number {
  return this.cart.reduce((sum, it) => sum + it.qty, 0);
}

get cartTotal(): number {
  return this.cart.reduce((sum, it) => sum + it.qty * it.price, 0);
}

addToCart(g: Game) {
  const cuRaw = localStorage.getItem('currentUser');
  let cartKey = 'cart:guest';
  if (cuRaw) {
    try {
      const cu = JSON.parse(cuRaw);
      const keyId = cu?.id || cu?.email || 'guest';
      cartKey = `cart:${keyId}`;
    } catch {}
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤
  const raw = localStorage.getItem(cartKey);
  let cart = raw ? JSON.parse(raw) : [];

  // ‡∏´‡∏≤‡πÄ‡∏Å‡∏°‡∏ã‡πâ‡∏≥
  const existing = cart.find((x: any) => x.gameId === g.id);
  if (existing) {
    existing.qty += 1;
  } else {
    // ‚úÖ ‡πÉ‡∏ä‡πâ g.imagePath ‡∏à‡∏≤‡∏Å backend ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    cart.push({
      gameId: g.id,
      title: g.title,
      price: g.price,
      qty: 1,
      imageFileName: g.imagePath ?? null
    });
  }

  localStorage.setItem(cartKey, JSON.stringify(cart));
  alert(`‡πÄ‡∏û‡∏¥‡πà‡∏° "${g.title}" ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!`);
}


// (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏•‡∏ö/‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
decreaseItem(g: Game) {
  const idx = this.cart.findIndex(x => x.gameId === g.id);
  if (idx >= 0) {
    this.cart[idx].qty -= 1;
    if (this.cart[idx].qty <= 0) this.cart.splice(idx, 1);
    this.saveCart();
  }
}

removeItem(g: Game) {
  this.cart = this.cart.filter(x => x.gameId !== g.id);
  this.saveCart();
}

  async loadGames() {
    try {
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å backend ‡∏Å‡πà‡∏≠‡∏ô
      const res = await this.api.getGames();
      this.allGames = res;

      // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ + ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      this.applyFilters();
    } catch (err) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
      this.games = [];
    }
  }

  applyFilters() {
    const searchLower = this.searchTerm.toLowerCase().trim();
    const selected = this.selectedGenre;

    this.games = this.allGames.filter(g => {
      const matchName = g.title.toLowerCase().includes(searchLower);
      const matchGenre = selected === '‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó' || g.genre === selected;
      return matchName && matchGenre;
    });
  }
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
   onSearchChange() {
    this.applyFilters();
  }

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  onGenreChange() {
    this.applyFilters();
  }

  imageUrl(imagePath?: string | null): string {
    // ‡∏ñ‡πâ‡∏≤ server ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 203 ‡πÄ‡∏ä‡πà‡∏ô /upload/<imagePath>
    return `http://202.28.34.203:30000/upload/${imagePath}`;
  }

  // üë§ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  async goToProfile() {
    await this.router.navigate(['/profile']);
  }
  
  // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
showGameDetail(game: Game) {
  this.selectedGame = game;
  document.body.style.overflow = 'hidden'; // ‡∏õ‡∏¥‡∏î scroll
}

// ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î
closeDetail(event?: MouseEvent) {
  if (event && (event.target as HTMLElement).classList.contains('popup-overlay')) {
    this.selectedGame = null;
  } else if (!event) {
    this.selectedGame = null;
  }
  document.body.style.overflow = 'auto';
}
  // üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  logout() {
    localStorage.removeItem('currentUser');
    localStorage.removeItem('cart');
    localStorage.removeItem('transactions');
    localStorage.removeItem('walletBalance');
    alert('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ');
    this.router.navigate(['/']);
  }
}
