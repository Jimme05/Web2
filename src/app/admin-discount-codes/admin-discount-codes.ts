import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AdminNavbar } from '../admin-navbar/admin-navbar';
import { DiscountService, DiscountCodeModel } from '../services/discount.service';

@Component({
  selector: 'app-admin-discount-codes',
  standalone: true,
  imports: [CommonModule, FormsModule, AdminNavbar],
  templateUrl: './admin-discount-codes.html',
  styleUrl: './admin-discount-codes.scss'
})
export class AdminDiscountCodes implements OnInit {
  // ‡∏ü‡∏≠‡∏£‡πå‡∏°
  couponName = '';
  discountPercent = 5;
  usageLimit: number | null = 1;
  perUserLimit: number | null = 1; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  isPercent = false;
  minOrderAmount: number | null = null;
  startAt: string | null = null;
  endAt: string | null = null;
  isActive = true;
  loading = false;

  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  editing = false;
  editingId: number | null = null;

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  coupons: DiscountCodeModel[] = [];

  constructor(private discounts: DiscountService) {}

  async ngOnInit(): Promise<void> {
    await this.loadCoupons();
  }

  async loadCoupons(): Promise<void> {
    try {
      this.coupons = await this.discounts.listDiscounts();
    } catch (error) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
      this.coupons = [];
    }
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  async saveCoupon(): Promise<void> {
    if (!this.couponName.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î');
      return;
    }
    if (this.discountPercent <= 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (> 0)');
      return;
    }

    this.loading = true;
    try {
      if (this.editing && this.editingId) {
        // üü° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
        await this.discounts.updateDiscount(this.editingId, {
          amount: this.discountPercent,
          isPercent: this.isPercent,
          maxUses: this.usageLimit,
          perUserLimit: this.perUserLimit, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
          minOrderAmount: this.minOrderAmount,
          startAt: this.startAt,
          endAt: this.endAt,
          isActive: this.isActive
        });
        alert('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        // üü¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        await this.discounts.createDiscount({
          code: this.couponName.trim().toUpperCase(),
          amount: this.discountPercent,
          isPercent: this.isPercent,
          maxUses: this.usageLimit,
          perUserLimit: this.perUserLimit, // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
          minOrderAmount: this.minOrderAmount,
          startAt: this.startAt,
          endAt: this.endAt,
          isActive: this.isActive
        });
        alert('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      this.resetForm();
      await this.loadCoupons();
    } catch (err: any) {
      console.error('Error:', err);
      alert(err?.message || '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    } finally {
      this.loading = false;
    }
  }

  editCoupon(c: DiscountCodeModel) {
    this.editing = true;
    this.editingId = c.id;
    this.couponName = c.code;
    this.discountPercent = c.amount;
    this.isPercent = c.isPercent;
    this.usageLimit = c.maxUses ?? null;
    this.perUserLimit = c.perUserLimit ?? null; // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°
    this.minOrderAmount = c.minOrderAmount ?? null;
    this.startAt = c.startAt ?? null;
    this.endAt = c.endAt ?? null;
    this.isActive = c.isActive;
  }

  cancelEdit() {
    this.resetForm();
  }

  async deleteCoupon(c: DiscountCodeModel) {
    if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á "${c.code}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) return;

    try {
      await this.discounts.deleteDiscount(c.id);
      alert('üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      await this.loadCoupons();
    } catch (err) {
      console.error('‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    }
  }

  private resetForm() {
    this.couponName = '';
    this.discountPercent = 5;
    this.usageLimit = 1;
    this.perUserLimit = 1;
    this.isPercent = false;
    this.minOrderAmount = null;
    this.startAt = null;
    this.endAt = null;
    this.isActive = true;
    this.editing = false;
    this.editingId = null;
  }
}
